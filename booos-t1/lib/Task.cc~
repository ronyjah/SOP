#include <iostream>
#include <sstream>
#include "BOOOS.h"
#include "Task.h"
#include <stdio.h>
#include <stdlib.h>
#include <ucontext.h>
#include <Scheduler.h>

using namespace std;
namespace BOOOS
{

volatile Task * Task::__running;
int Task::__tid_counter;
Task * Task::__main;
Queue Task::__ready;
int Task::_count;




Task::Task(){
	}

void Task::init() {
	Task::__main = new Task();
	getcontext(&Task::__main->_context);
	Task::__running = Task::__main;
	Task::__main->_state = RUNNING;
	Task::_count = 0;
	Task::__tid_counter  = 0;
	Task::__main->_tid = __tid_counter;
	Task::__tid_counter++;
	Task::_count++;
}


Task::~Task(){
	free(this->_context.uc_stack.ss_sp);
}

Task::Task(void (*entry_point)(void*), int nargs, void * arg){
		//cout << "Valor de _count quando entrou" <<_count << endl;
	getcontext(&_context);
	char * _stack = (char*) malloc(STACK_SIZE);
	if(_stack){
		 _context.uc_stack.ss_sp = _stack;
		 _context.uc_stack.ss_size = STACK_SIZE;
		 _context.uc_stack.ss_flags = 0;
		 _context.uc_link = (ucontext*)1;
	}else{
		cout << "Erro para criar uma pilha! Endereço stack" << _stack << endl;
		//return 0;
	}
	makecontext(&_context, (void (*)())entry_point, nargs, arg);
	this->_state = Task::READY;
	this->_tid = Task::__tid_counter;
	Task::__tid_counter++;
	Task::_count++;
	Task::__ready.insert(this);
	//  cout << " Task::Task _count: " <<_count << endl;
	//  cout << " Task::Task __tid_counter: " <<__tid_counter << endl;		
	return;
	
}



void Task::pass_to(Task * tExec, State s){

try{	
	if(this->_state != Task::SCHEDULER){
		this->_state = s;
	 	tExec->_state = RUNNING;					//atualização da tarefa em execução	
	}
	if(this->_state == Task::FINISHING){
		Task::_count--;
	}
	
	if(this->_state == Task::READY){
		Task::_ready.insert(this);
	}
	swapcontext(&this->_context,&tExec->_context);
	Task::__running = tExec; 						//atualização da tarefa em execução
											
}
catch(int e)
{
	cout << "Erro. pass_to" << e << endl;
}
	return;
}

void Task::exit(int code){
	State aux=FINISHING;
	this->pass_to((Task*)__main, aux);
	
}

void Task::nice(int n){
	if(n > -21 and n < 21){
		rank(n);
	}else{
		cerr << "Erro. Prioridade: "<< n << endl;	
	}
}

void Task::yield(){
	this->pass_to(Scheduler::self());
}

/*

MENSAGENS PARA DEPURAÇÃO
  cout << "----=====EXECUTANDO=====----" << endl;
  cout << "Task::init __tid_counter: " <<__tid_counter << endl;
  cout << "Task::init  _count: " <<_count << endl;
  cout << "Task::init __tid_counter: " <<__tid_counter << endl;
*/



} /* namespace BOOOS */
